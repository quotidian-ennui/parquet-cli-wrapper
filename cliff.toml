# configuration file for git-cliff (0.1.0)

[changelog]
# changelog header
header = """
# Changelog\n
A new Apache parquet-mr release happened; this changelog just lists the changes to the repo used to build the parquet-cli tool.\n
"""
# template for the changelog body
# https://tera.netlify.app/docs/#introduction
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits %}
        - {% if commit.breaking %}💥(**BREAKING**) {% endif %}{% if commit.scope %}({{ commit.scope }}) {% endif %}{{ commit.message | upper_first | trim}} by {{commit.author.name}}\
    {% endfor %}
{% endfor %}
{% if version %}\
    {% if previous.version %}\
      **Full Changelog**: https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}/compare/{{ previous.version }}...{{ version }}\
    {% endif %}\
{% endif -%}\
{% raw %}\n{% endraw %}
"""
# remove the leading and trailing whitespace from the template
trim = true
# changelog footer
footer = """
"""

postprocessors = [
    { pattern = 'dependabot\[.*\]', replace="@dependabot"},
    { pattern = 'qe-repo-updater\[.*\]', replace="[qe-repo-updater](https://github.com/apps/qe-repo-updater)"},
    { pattern = 'Lewin Chan', replace="@quotidian-ennui"},
]


[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = false
# regex for preprocessing the commit messages
commit_preprocessors = [
    { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](https://github.com/quotidian-ennui/parquet-cli-wrapper/issues/${2}))"},
    { pattern = '^Bump (.*)', replace = "deps: Bump $1"},
]
# regex for parsing and grouping commits
commit_parsers = [
    { message = "^feat\\(tf\\)", group = "<!-- 09 -->🏭 Terraform"},
    { message = "^feat\\(ci|build\\)", group = "<!-- 07 -->👷 Build Environment"},
    { message = "^feat", group = "<!-- 01 -->✨ Features"},
    { message = "^fixup!", skip = true},
    { message = "^fix\\(ci|build\\)", group = "<!-- 07 -->👷 Build Environment"},
    { message = "^fix", group = "<!-- 02 -->🐛 Bug Fixes"},
    { message = "^doc", group = "<!-- 03 -->📝 Documentation"},
    { message = "^docs", group = "<!-- 03 -->📝 Documentation"},
    { message = "^perf", group = "<!-- 04 -->⚡ Performance"},
    { message = "^refactor\\(tf\\)", group = "<!-- 09 -->🏭 Terraform"},
    { message = "^refactor\\(ci|build\\)", group = "<!-- 07 -->👷 Build Environment"},
    { message = "^refactor", group = "<!-- 05 -->♻️ Refactoring"},
    { message = "^lint", group = "<!-- 05 -->♻️ Refactoring"},
    { message = "^test", group = "<!-- 06 -->🧪 Testing"},
    { message = "^build\\(deps.*\\)", group = "<!-- 99 -->📌 Dependency Management"},
    { message = "^build\\(dev-deps.*\\)", group = "<!-- 99 -->📌 Dependency Management"},
    { message = "^(ci|build)", group = "<!-- 07 -->👷 Build Environment"},
    { message = "^deps\\(ci|build\\)", group = "<!-- 07 -->👷 Build Environment"},
    { message = "^deps", group = "<!-- 99 -->📌 Dependency Management"},
    { message = "^chore\\(deps\\)", group = "<!-- 99 -->📌 Dependency Management"},
    { message = "^chore\\(release\\):", skip = true},
    { message = "^release:", skip = true},
    { message = "^Merge branch '", skip = true},
    { message = "^Initial commit", skip = true},
    { message = "^chore", group = "<!-- 10 -->🧹 Miscellaneous Tasks"},
    { body = ".*security", group = "<!-- 00 -->🛡️ Security"},
    { message = ".*", group = "<!--80-->🤷 Uncategorised" },
]
# filter out the commits that are not matched by commit parsers
filter_commits = false
# glob pattern for matching git tags
tag_pattern = "[0-9]*"
# regex for skipping tags
skip_tags = ".*-beta.*"
# regex for ignoring tags
ignore_tags = ".*-alpha.*"
# sort the tags chronologically
date_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
protect_breaking_commits = true
